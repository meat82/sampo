def tomcat_home='F:/apps/eclipse-sts/pivotal-tc-server-developer-3.2.4.SR1/base-instance'
def tomcat_webapps = tomcat_home + '/webapps'
def web_app = 'build/libs'
def warName = 'sampo'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile ("org.springframework:spring-core:" + springVersion)
	compile ("org.springframework:spring-web:" + springVersion)
    compile ("org.springframework:spring-webmvc:" + springVersion)
    compile ("org.springframework:spring-jdbc:" + springVersion)
	compile("javax.servlet:javax.servlet-api:" + javaServletApiVersion)
	compile("javax.servlet:jstl:" + javaServletJstlVersion)
	compile("javax.servlet.jsp:javax.servlet.jsp-api:" + javaServletJpsVersion)
	compile("log4j:log4j:"+log4jVersion) 
	compile("org.slf4j:slf4j-api:" + slf4jVersion)
	compile("mysql:mysql-connector-java:" + mySqlVersion)
	compile("com.fasterxml.jackson.core:jackson-core:" + jacksonVersion)
	compile("com.fasterxml.jackson.core:jackson-databind:" + jacksonVersion)
	
	//Spring Tiles dependency START
	compile("org.apache.tiles:tiles-api:" + apacheTilesVersion)
	compile("org.apache.tiles:tiles-core:" + apacheTilesVersion)
	compile("org.apache.tiles:tiles-jsp:" + apacheTilesVersion)
	compile("org.apache.tiles:tiles-servlet:" + apacheTilesVersion)
	compile("org.apache.tiles:tiles-template:" + apacheTilesVersion)
	compile("org.apache.tiles:tiles-request-api:" + apacheRequestAPIVersion)
	compile("org.apache.velocity:velocity-tools:" + velocityVersion)
	compile("org.freemarker:freemarker:" + freeMarkerVersion)
	compile("org.mvel:mvel2:" + mvelVersion)
	compile("ognl:ognl:" + ognlVersion)
	//Spring Tiles dependency END
	
	compile group: 'org.apache.commons', name: 'commons-lang3', version: apacheCommonsLang3Version
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersionWrapper
}
task webDeploy(dependsOn: build) {
    copy {
		from web_app + '/' + warName + '.war'
        into tomcat_webapps
    }
}
task explodedWar(type: Sync) {
    into "$buildDir" + '/' + 'libs' + '/' + warName
    with war
}